#!/usr/bin/env groovy

def products
def daily_version
def versions_collection
def products_collection

pipeline {
agent { label 'master'}
    parameters 
    {
                  choice(name: 'Deployment_Type', choices:"Release\nDaily Build", description: "Select Deployment Type" )
                  choice(name: 'Source_Env', choices:"Dev\nTest", description: "Select Source Environment" )
                  choice(name: 'Target_Env', choices:"Test\nUAT\nPre-Prod", description: "Select Target Environment" )
                  choice(name: 'Services', choices:"smart-businesstax-discovery-inbound\nsmart-ttx-annualroll-outbound\nsmart-ttx-rollcorrection-outbound\nAll", description: "Select Service" )
                  string(defaultValue: " ", description: 'What environment?', name: 'version')
    }
    stages 
    {
        stage("Select Product and Deployment after that") 
        {
            steps 
            {
                script 
                {
                    if("${params.Deployment_Type}" == "Release")
                    { 
                        def bodyFile = new File("/app/JobRelease/latest_release.txt").readLines()
                        
                        bodyFile.each { line ->
                                         def arr = line.tokenize(':')
                                         def product = arr[0]
                                         def version = arr[1]
                                         println "product : ${product}  version: ${version}" 
                                         build(job: "Deployment",
                                                 parameters:
                                                 [string(name: 'Environment', value: "${params.Target_Env}"),
                                                 string(name: 'Product', value: "${product}"),
                                                 string(name: 'Version', value: "${version}"),
                                        ])
                                          
                        }
                              
                    }
                    else if("${params.Deployment_Type}" == "Daily Build")
                    {
                       if ("${params.Services}" == "All")
                       {
                           file.exists()
                           
                           def file = new File("/app/JobRelease/RELEASE_${params.version}.txt").exists()
                           
                           echo "${file}"
                           if("${file}")
                           {
                                  def bodyFile = new File("/app/JobRelease/latest_release.txt").readLines()
                        
                                  bodyFile.each { line ->
                                         def arr = line.tokenize(':')
                                         def product = arr[0]
                                         def version = arr[1]
                                         println "product : ${product}  version: ${version}" 
                                         build(job: "Deployment",
                                                 parameters:
                                                 [string(name: 'Environment', value: "${params.Target_Env}"),
                                                 string(name: 'Product', value: "${product}"),
                                                 string(name: 'Version', value: "${version}"),
                                        ])
                                          
                                  }
                           }
                           else 
                           {
                               echo "Invalid param"

                           }
                              
                        }
                        else
                        {
                             build(job: "Deployment",
                                   parameters:
                                   [string(name: 'Environment', value: "${params.Target_Env}"),
                                    string(name: 'Product', value: "${params.Services}"),
                                    string(name: 'Version', value: "${params.version}"),
                                    ])
                         }
                    }                    
                }
            }
        }
    }
}

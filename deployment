#!/usr/bin/env groovy
import com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition

def products
def daily_version
def versions_collection
def products_collection

pipeline {
agent { label 'master'}
    parameters 
    {
                  choice(name: 'Deployment_Type', choices:"Latest\nAd-Hoc", description: "Select Deployment Type" )
                  choice(name: 'Source_Env', choices:"Dev\nTest", description: "Select Source Environment" )
                  choice(name: 'Target_Env', choices:"Test\nUAT\nPre-Prod", description: "Select Target Environment" )
                  choice(name: 'Services', choices:"smart-businesstax-discovery-inbound\nsmart-ttx-annualroll-outbound\nsmart-ttx-rollcorrection-outbound\nAll", description: "Select Service" )
                  /*
                  extendedChoice(name: 'Multi_Services', choices:"smart-businesstax-discovery-inbound\nsmart-ttx-annualroll-outbound\nsmart-ttx-rollcorrection-outbound\nAll", description: "Select Service" )
                  */
                  
                  string(defaultValue: "", description: 'What environment?', name: 'version')
    }
    stages 
    {
        stage("Select Product and Deployment after that") 
        {
            steps 
            {
                script 
                {    
                    def multiSelect= new ExtendedChoiceParameterDefinition("name", 
            "PT_CHECKBOX", 
            "blue,green,yellow,blue", 
            "project name",
            "", 
            "",
            "", 
            "", 
            "", 
            "", 
            "", 
            "", 
            "", 
            "", 
            "", 
            "", 
            "", 
            "blue,green,yellow,blue", 
            "", 
            "", 
            "", 
            "", 
            "", 
            "", 
            "", 
            "", 
            false,
            false, 
            3, 
            "multiselect", 
            ",") 

   def userInput = input  id: 'customID', message: 'Let\'s promote?', ok: 'Release!', parameters:  [multiSelect]


echo "Hello: "+ userInput
                    if("${params.Deployment_Type}" == "Latest")
                    { 
                        def bodyFile = new File("/app/JobRelease/latest_release.txt").readLines()
                        
                        bodyFile.each { line ->
                                         def arr = line.tokenize(':')
                                         def product = arr[0]
                                         def version = arr[1]
                                         println "product : ${product}  version: ${version}" 
                                         build(job: "Deployment",
                                                 parameters:
                                                 [string(name: 'Environment', value: "${params.Target_Env}"),
                                                 string(name: 'Product', value: "${product}"),
                                                 string(name: 'Version', value: "${version}"),
                                        ])
                                          
                        }
                              
                    }
                    else if("${params.Deployment_Type}" == "Ad-Hoc")
                    {
                       if ("${params.Services}" == "All")
                       {
                           def a = "/app/JobRelease/RELEASE_${params.version}.txt"
                           def testFile = new File(a)
                           
                           if(testFile.exists())
                           {
                                  def bodyFile = new File("/app/JobRelease/RELEASE_${params.version}.txt").readLines()
                        
                                  bodyFile.each { line ->
                                         def arr = line.tokenize(':')
                                         def product = arr[0]
                                         def version = arr[1]
                                         println "product : ${product}  version: ${version}" 
                                         build(job: "Deployment",
                                                 parameters:
                                                 [string(name: 'Environment', value: "${params.Target_Env}"),
                                                 string(name: 'Product', value: "${product}"),
                                                 string(name: 'Version', value: "${version}"),
                                        ])
                                          
                                  }
                           }
                           else 
                           {
                               error('Invalid Version.')

                           }
                              
                        }
                        else
                        {
                             build(job: "Deployment",
                                   parameters:
                                   [string(name: 'Environment', value: "${params.Target_Env}"),
                                    string(name: 'Product', value: "${params.Services}"),
                                    string(name: 'Version', value: "${params.version}"),
                                    ])
                         }
                    }                    
                }
            }
        }
    }
}

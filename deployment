#!/usr/bin/env groovy
import com.cwctravel.hudson.plugins.extended_choice_parameter.ExtendedChoiceParameterDefinition
import org.apache.commons.lang.StringUtils;

def products
def daily_version
def versions_collection
def products_collection

pipeline {
agent { label 'master'}
    parameters 
    {
                  choice(name: 'Deployment_Type', choices:"Latest\nAd-Hoc", description: "Select Deployment Type" )
                  choice(name: 'Source_Env', choices:"Dev\nTest", description: "Select Source Environment" )
                  choice(name: 'Target_Env', choices:"Test\nUAT\nPre-Prod", description: "Select Target Environment" )
                  extendedChoice( 
                                    defaultValue: 'All', 
                                    description: 'Please select the service which you want to deploy', 
                                    multiSelectDelimiter: ',', 
                                    name: 'Services', 
                                    quoteValue: false, 
                                    saveJSONParameterToFile: false, 
                                    type: 'PT_CHECKBOX', 
                                    value:'smart-businesstax-discovery-inbound,smart-ttx-annualroll-outbound,smart-ttx-rollcorrection-outbound,All', 
                                    visibleItemCount: 4)
                  
                  string(defaultValue: "", description: 'What environment?', name: 'version')
    }
    stages 
    {
        stage("Select Product and Deployment after that") 
        {
            steps 
            {
                script 
                { 
                    if("${params.Deployment_Type}" == "Latest")
                    { 
                        def bodyFile = new File("/app/JobRelease/latest_release.txt").readLines()
                        
                        bodyFile.each { line ->
                                         def arr = line.tokenize(':')
                                         def product = arr[0]
                                         def version = arr[1]
                                         println "product : ${product}  version: ${version}" 
                                         build(job: "Deployment",
                                                 parameters:
                                                 [string(name: 'Environment', value: "${params.Target_Env}"),
                                                 string(name: 'Product', value: "${product}"),
                                                 string(name: 'Version', value: "${version}"),
                                        ])
                                          
                        }
                              
                    }
                    else if("${params.Deployment_Type}" == "Ad-Hoc")
                    {
                        if (StringUtils.contains("${params.Services}", "All"))
                       {
                           def a = "/app/JobRelease/RELEASE_${params.version}.txt"
                           def testFile = new File(a)
                           
                           if(testFile.exists())
                           {
                                  def bodyFile = new File("/app/JobRelease/RELEASE_${params.version}.txt").readLines()
                        
                                  bodyFile.each { line ->
                                         def arr = line.tokenize(':')
                                         def product = arr[0]
                                         def version = arr[1]
                                         println "product : ${product}  version: ${version}" 
                                         build(job: "Deployment",
                                                 parameters:
                                                 [string(name: 'Environment', value: "${params.Target_Env}"),
                                                 string(name: 'Product', value: "${product}"),
                                                 string(name: 'Version', value: "${version}"),
                                        ])
                                          
                                  }
                           }
                           else 
                           {
                               error('Invalid Version.')

                           }
                              
                        }
                        else
                        {
                             build(job: "Deployment",
                                   parameters:
                                   [string(name: 'Environment', value: "${params.Target_Env}"),
                                    string(name: 'Product', value: "${params.Services}"),
                                    string(name: 'Version', value: "${params.version}"),
                                    ])
                         }
                    }                    
                }
            }
        }
    }
}
